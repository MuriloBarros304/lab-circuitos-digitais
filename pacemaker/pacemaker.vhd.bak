-- Flip-flop

ENTITY ffd IS
	PORT(clk, d, p, c : IN BIT;
		q: OUT BIT);
END ffd;

ARCHITECTURE ckt OF ffd IS
		SIGNAL qS: BIT;
BEGIN
	PROCESS (clk, p, c)
		BEGIN
			IF p = '0' THEN qS <= '1';
			ELSIF  c = '0' THEN qS <= '0';
			ELSIF clk = '1' AND clk ' EVENT THEN
			qS <= d;
			END IF;
	END PROCESS;
q <= qS;
END ckt;

-- Maquina de estado
ENTITY mde IS
	PORT(s: IN BIT_VECTOR(2 DOWNTO 0);
	Sa, Sv, Za, Zv: IN BIT;
	Pa, Pv, Ta, Tv: OUT BIT;
	n: out BIT_VECTOR(2 DOWNTO 0));
END mde;

ARCHITECTURE ckt OF mde IS
	BEGIN
			Pa <= s(1) AND NOT s(0);
			Pv <= s(2) AND  s(0);
			Ta <= NOT s(2) AND NOT s(1) AND NOT s(0);
			Tv <= s(1) AND s(0);
			n(2) <= (s(1) AND s(0)) OR (s(2)AND NOT s(0) AND NOT Sv);
			n(1) <= (NOT s(2) AND NOT s(1) AND s(0) AND Za) OR (NOT s(2) and not s(1) AND s(0) AND Sa) OR (s(1) AND NOT s(0));
			n(0) <= (NOT s(2) and not s(1) AND NOT Za) OR (NOT s(2) AND NOT s(0)) OR (NOT s(0) AND NOT Sv AND Zv) OR (NOT s(2) AND NOT s(1) AND Sa);
	END ckt;

--Registrador			
	
ENTITY reg IS
	PORT (s: IN BIT_VECTOR(2 DOWNTO 0);
			clk: IN BIT;
			n: OUT BIT_VECTOR(2 DOWNTO 0);
END reg;

ARCHITECTURE ckt OF reg IS
	COMPONENT ffd IS
		PORT(clk, d, p, c: IN BIT;
			  q: OUT BIT);
	END COMPONENT;
	
	BEGIN
		ffd_0: ffd PORT MAP(clk => clk,
			d => s(0),
			p => '1',
			c => '1',
			q => n(0)
		);

		ffd_1: ffd PORT MAP(clk => clk,
			d => s(1),
			p => '1',
			c => '1',
			q => n(1)
		);
		
		ffd_2: ffd PORT MAP(clk => clk,
			d => s(2),
			p => '1',
			c => '1',
			q => n(2)
		);
END CKT;
		
--Logica combinancional
ENTITY bc IS
	PORT(Sa, Sv, Za, Zv, clk: IN BIT
			Pa, Pv, Ta, Tv: OUT BIT);
END bc

ARCHITECTURE ckt OF bc IS

	COMPONENT mde IS
		PORT(s: IN BIT_VECTOR(2 DOWNTO 0);
			Sa, Sv, Za, Zv: IN BIT;
			Pa, Pv, Ta, Tv: OUT BIT;
			n: out BIT_VECTOR(2 DOWNTO 0));
	END COMPONENT;

	COMPONENT reg IS
		PORT (s: IN BIT_VECTOR(2 DOWNTO 0);
			clk: IN BIT;
			n: OUT BIT_VECTOR(2 DOWNTO 0);
	END COMPONENT;

	SIGNAL sig_s, sig_n: BIT_VECTOR(2 DOWNTO 0);
	
	BEGIN
		mde_0: mde PORT MAP(
			s => sig_s,
			Sa => Sa,
			Sv => Sv,
			Za => Zv,
			Zv => Zv,
			Pa => Pa,
			Pv => Pv,
			Ta => Ta,
			Tv => Tv,
			n => sig_n
		);
		reg_0: reg PORT MAP(
			s => sig_n,
			clk => clk,
			n => sig_s;
		);
END ckt;		
		
		
		
--Temporizadores

ENTITY temporizador IS
	PORT(tv, ta, clk_cont: IN BIT;
			zv, za: OUT BIT);
END temporizador;

ARCHITECTURE ckt OF temporizador IS
	COMPONENT ffd IS
		PORT(ckl, d, p, c: IN BIT;
				q: OUT BIT);
	END COMPONENT;
	
	SIGNAL sig_Df, sig_f: BIT_VECTOR(3 DOWNTO 0);
	SIGNAL sig_comb, sig_comb2, sig_clr, sig_clr2: BIT;
	SIGNAL sig_Di, sig_i: BIT_VECTOR(4 DOWNTO 0);

--Cont_s

	sig_Df(0) <= (sig_f(0) XOR '1');
	sig_Df(1) <= (sig_f(1) XOR ('1' AND sig_f(0)));
	sig_Df(2) <= (sig_f(2) XOR (('1' AND sig_f(0)) AND sigf_f(1)));
	sig_Df(3) <= (sig_f(3) XOR ((('1' AND sig_f(0)) AND sigf_f(1)) AND sig_f(2)));

	ffd_cont_f_0: ffd PORT MAP(
		clk => clk_cont,
		d => sig_Df(0),
		p => '1',
		c => sig_clr,
		q => sig_f(0)
	);
	
	ffd_cont_f_1: ffd PORT MAP(
		clk => clk_cont,
		d => sig_Df(1),
		p => '1',
		c => sig_clr,
		q => sig_f(1)
	);
	
	ffd_cont_f_2: ffd PORT MAP(
		clk => clk_cont,
		d => sig_Df(2),
		p => '1',
		c => sig_clr,
		q => sig_f(2)
	);
	
	ffd_cont_f_3: ffd PORT MAP(
		clk => clk_cont,
		d => sig_Df(3),
		p => '1',
		c => sig_clr,
		q => sig_f(3)
	);
	
	zv <= ((NOT sig_f(0)AND (NOT sig_f(1))) AND (sig_f(2))) AND NOT sig_f(3);
	sig_comb <= ((sig_f(0) AND (NOT sig_f(1))) AND (sig_f(2))) AND NOT sig_f(3);
	sig_clr <= NOT (sig_comb OR tv);
	
--Cont_2	
	sig_Di(0) <= (sig_i(0) XOR '1');
	sig_Di(1) <= (sig_i(1) XOR ('1' AND sig_i(0)));
	sig_Di(2) <= (sig_i(2) XOR (('1' AND sig_i(0)) AND sig_i(1)));
	sig_Di(3) <= (sig_i(3) XOR ((('1' AND sig_i(0)) AND sig_i(1)) AND sig_i(2)));
	sig_Di(4) <= (sig_i(4) XOR (((('1' AND sig_i(0)) AND sig_i(1)) AND sig_i(2)) AND sig_i(3)));

	ffd_cont_i_0: ffd PORT MAP(
		clk => clk_cont,
		d => sig_Di(0),
		p => '1',
		c => sig_clr2,
		q => sig_i(0)
	);
	
	ffd_cont_i_1: ffd PORT MAP(
		clk => clk_cont,
		d => sig_Di(1),
		p => '1',
		c => sig_clr2,
		q => sig_i(1)
	);
	
	ffd_cont_i_2: ffd PORT MAP(
		clk => clk_cont,
		d => sig_Di(2),
		p => '1',
		c => sig_clr2,
		q => sig_i(2)
	);
	
	ffd_cont_i_3: ffd PORT MAP(
		clk => clk_cont,
		d => sig_Di(3),
		p => '1',
		c => sig_clr2,
		q => sig_i(3)
	);
	
	ffd_cont_i_4: ffd PORT MAP(
		clk => clk_cont,
		d => sig_Di(4),
		p => '1',
		c => sig_clr2,
		q => sig_i(4)
	);
	
	za <= ((sig_i(0)AND (sig_i(1))) AND (NOT sig_i(2))) AND (NOT sig_i(3))AND sig_i(4);
	sig_comb <= ((NOT sig_i(0) AND (NOT sig_i(1))) AND (sig_i(2))) AND (NOT sig_i(3)) AND sig_i(4);
	sig_clr2 <= NOT (sig_comb2 OR ta);

END ckt;


ENTITY marca_passo IS
	PORT(clk, sa, sv: IN BIT;
		pa, pv: OUT BIT);
END marca_passo;

ARCHITECTURE ckt OF marca_passo IS

	COMPONENT bc IS
		PORT(Sa, Sv, Za, Zv, clk: IN BIT;
				Pa, Pv, Ta, Tv: OUT bIT
		);
	END COMPONENT;

	SIGNAL sig_ta, sig_tv, sig_za, sig_zv, sig_pa, sig_pv: BIT;

	COMPONENT temporizador IS
		PORT(tv, ta,clk_cont: IN BIT;
				zv, za: OUT BIT
		);
	END COMPONENT;
	
	BEGIN
		bloco_controle: bc PORT MAP(
			Sa => sa,
			Sv => sv,
			Za => sig_za;
			Zv => sig_zv,
			clk => clk,
			Pa => sig_pa,
			Pv => sig_pv,
			Ta => sig_ta,
			Tv => sig_tv
		);
		
		temporizadores: temporizador PORT MAP(
			clk_cont => clk,
			tv => sig_tv,
			ta => sig_ta,
			zv => sig_zv,
			za => sig_za
		);
		
		pa <= sig_pa;
		pv <= sig_pv;
END ckt;	
			