// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus II 64-Bit"
// VERSION "Version 13.0.1 Build 232 06/12/2013 Service Pack 1 SJ Web Edition"

// DATE "07/03/2024 13:58:17"

// 
// Device: Altera EP2C35F672C6 Package FBGA672
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module pacemaker (
	s,
	clk,
	pacemaker_out);
input 	s;
input 	clk;
output 	pacemaker_out;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \u3|Add0~0_combout ;
wire \clk~combout ;
wire \u3|qv[0]~0_combout ;
wire \u2|p~1_combout ;
wire \u3|Add0~1_combout ;
wire \u3|Equal0~0_combout ;
wire \u3|tc~regout ;
wire \u2|next1~0_combout ;
wire \u1|q1~regout ;
wire \u1|q0~regout ;
wire \u2|p~0_combout ;
wire [2:0] \u3|qv ;


cycloneii_lcell_ff \u3|qv[2] (
	.clk(\clk~combout ),
	.datain(\u3|Add0~0_combout ),
	.sdata(gnd),
	.aclr(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(\u2|p~1_combout ),
	.devclrn(devclrn),
	.devpor(devpor),
	.regout(\u3|qv [2]));

cycloneii_lcell_comb \u3|Add0~0 (
// Equation(s):
// \u3|Add0~0_combout  = \u3|qv [2] $ (((\u3|qv [1] & \u3|qv [0])))

	.dataa(vcc),
	.datab(\u3|qv [2]),
	.datac(\u3|qv [1]),
	.datad(\u3|qv [0]),
	.cin(gnd),
	.combout(\u3|Add0~0_combout ),
	.cout());
// synopsys translate_off
defparam \u3|Add0~0 .lut_mask = 16'h3CCC;
defparam \u3|Add0~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneii_io \clk~I (
	.datain(gnd),
	.oe(gnd),
	.outclk(gnd),
	.outclkena(vcc),
	.inclk(gnd),
	.inclkena(vcc),
	.areset(gnd),
	.sreset(gnd),
	.differentialin(gnd),
	.linkin(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.combout(\clk~combout ),
	.regout(),
	.differentialout(),
	.linkout(),
	.padio(clk));
// synopsys translate_off
defparam \clk~I .input_async_reset = "none";
defparam \clk~I .input_power_up = "low";
defparam \clk~I .input_register_mode = "none";
defparam \clk~I .input_sync_reset = "none";
defparam \clk~I .oe_async_reset = "none";
defparam \clk~I .oe_power_up = "low";
defparam \clk~I .oe_register_mode = "none";
defparam \clk~I .oe_sync_reset = "none";
defparam \clk~I .operation_mode = "input";
defparam \clk~I .output_async_reset = "none";
defparam \clk~I .output_power_up = "low";
defparam \clk~I .output_register_mode = "none";
defparam \clk~I .output_sync_reset = "none";
// synopsys translate_on

cycloneii_lcell_comb \u3|qv[0]~0 (
// Equation(s):
// \u3|qv[0]~0_combout  = !\u3|qv [0]

	.dataa(\u3|qv [0]),
	.datab(vcc),
	.datac(vcc),
	.datad(vcc),
	.cin(gnd),
	.combout(\u3|qv[0]~0_combout ),
	.cout());
// synopsys translate_off
defparam \u3|qv[0]~0 .lut_mask = 16'h5555;
defparam \u3|qv[0]~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneii_lcell_comb \u2|p~1 (
// Equation(s):
// \u2|p~1_combout  = (!\u1|q1~regout ) # (!\u1|q0~regout )

	.dataa(\u1|q0~regout ),
	.datab(\u1|q1~regout ),
	.datac(vcc),
	.datad(vcc),
	.cin(gnd),
	.combout(\u2|p~1_combout ),
	.cout());
// synopsys translate_off
defparam \u2|p~1 .lut_mask = 16'h7777;
defparam \u2|p~1 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneii_lcell_ff \u3|qv[0] (
	.clk(\clk~combout ),
	.datain(\u3|qv[0]~0_combout ),
	.sdata(gnd),
	.aclr(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(\u2|p~1_combout ),
	.devclrn(devclrn),
	.devpor(devpor),
	.regout(\u3|qv [0]));

cycloneii_lcell_comb \u3|Add0~1 (
// Equation(s):
// \u3|Add0~1_combout  = \u3|qv [1] $ (\u3|qv [0])

	.dataa(vcc),
	.datab(vcc),
	.datac(\u3|qv [1]),
	.datad(\u3|qv [0]),
	.cin(gnd),
	.combout(\u3|Add0~1_combout ),
	.cout());
// synopsys translate_off
defparam \u3|Add0~1 .lut_mask = 16'h0FF0;
defparam \u3|Add0~1 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneii_lcell_ff \u3|qv[1] (
	.clk(\clk~combout ),
	.datain(\u3|Add0~1_combout ),
	.sdata(gnd),
	.aclr(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(\u2|p~1_combout ),
	.devclrn(devclrn),
	.devpor(devpor),
	.regout(\u3|qv [1]));

cycloneii_lcell_comb \u3|Equal0~0 (
// Equation(s):
// \u3|Equal0~0_combout  = (\u3|qv [2] & (\u3|qv [1] & !\u3|qv [0]))

	.dataa(\u3|qv [2]),
	.datab(\u3|qv [1]),
	.datac(vcc),
	.datad(\u3|qv [0]),
	.cin(gnd),
	.combout(\u3|Equal0~0_combout ),
	.cout());
// synopsys translate_off
defparam \u3|Equal0~0 .lut_mask = 16'h0088;
defparam \u3|Equal0~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneii_lcell_ff \u3|tc (
	.clk(\clk~combout ),
	.datain(\u3|Equal0~0_combout ),
	.sdata(gnd),
	.aclr(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(\u2|p~1_combout ),
	.devclrn(devclrn),
	.devpor(devpor),
	.regout(\u3|tc~regout ));

cycloneii_lcell_comb \u2|next1~0 (
// Equation(s):
// \u2|next1~0_combout  = (\u1|q0~regout  & (\u3|tc~regout  & !\u1|q1~regout ))

	.dataa(\u1|q0~regout ),
	.datab(\u3|tc~regout ),
	.datac(vcc),
	.datad(\u1|q1~regout ),
	.cin(gnd),
	.combout(\u2|next1~0_combout ),
	.cout());
// synopsys translate_off
defparam \u2|next1~0 .lut_mask = 16'h0088;
defparam \u2|next1~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneii_lcell_ff \u1|q1 (
	.clk(\clk~combout ),
	.datain(\u2|next1~0_combout ),
	.sdata(gnd),
	.aclr(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.regout(\u1|q1~regout ));

cycloneii_lcell_ff \u1|q0 (
	.clk(\clk~combout ),
	.datain(vcc),
	.sdata(gnd),
	.aclr(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(\u2|p~1_combout ),
	.devclrn(devclrn),
	.devpor(devpor),
	.regout(\u1|q0~regout ));

cycloneii_lcell_comb \u2|p~0 (
// Equation(s):
// \u2|p~0_combout  = (\u1|q1~regout  & !\u1|q0~regout )

	.dataa(\u1|q1~regout ),
	.datab(vcc),
	.datac(vcc),
	.datad(\u1|q0~regout ),
	.cin(gnd),
	.combout(\u2|p~0_combout ),
	.cout());
// synopsys translate_off
defparam \u2|p~0 .lut_mask = 16'h00AA;
defparam \u2|p~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneii_io \s~I (
	.datain(gnd),
	.oe(gnd),
	.outclk(gnd),
	.outclkena(vcc),
	.inclk(gnd),
	.inclkena(vcc),
	.areset(gnd),
	.sreset(gnd),
	.differentialin(gnd),
	.linkin(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.combout(),
	.regout(),
	.differentialout(),
	.linkout(),
	.padio(s));
// synopsys translate_off
defparam \s~I .input_async_reset = "none";
defparam \s~I .input_power_up = "low";
defparam \s~I .input_register_mode = "none";
defparam \s~I .input_sync_reset = "none";
defparam \s~I .oe_async_reset = "none";
defparam \s~I .oe_power_up = "low";
defparam \s~I .oe_register_mode = "none";
defparam \s~I .oe_sync_reset = "none";
defparam \s~I .operation_mode = "input";
defparam \s~I .output_async_reset = "none";
defparam \s~I .output_power_up = "low";
defparam \s~I .output_register_mode = "none";
defparam \s~I .output_sync_reset = "none";
// synopsys translate_on

cycloneii_io \pacemaker_out~I (
	.datain(\u2|p~0_combout ),
	.oe(vcc),
	.outclk(gnd),
	.outclkena(vcc),
	.inclk(gnd),
	.inclkena(vcc),
	.areset(gnd),
	.sreset(gnd),
	.differentialin(gnd),
	.linkin(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.combout(),
	.regout(),
	.differentialout(),
	.linkout(),
	.padio(pacemaker_out));
// synopsys translate_off
defparam \pacemaker_out~I .input_async_reset = "none";
defparam \pacemaker_out~I .input_power_up = "low";
defparam \pacemaker_out~I .input_register_mode = "none";
defparam \pacemaker_out~I .input_sync_reset = "none";
defparam \pacemaker_out~I .oe_async_reset = "none";
defparam \pacemaker_out~I .oe_power_up = "low";
defparam \pacemaker_out~I .oe_register_mode = "none";
defparam \pacemaker_out~I .oe_sync_reset = "none";
defparam \pacemaker_out~I .operation_mode = "output";
defparam \pacemaker_out~I .output_async_reset = "none";
defparam \pacemaker_out~I .output_power_up = "low";
defparam \pacemaker_out~I .output_register_mode = "none";
defparam \pacemaker_out~I .output_sync_reset = "none";
// synopsys translate_on

endmodule
