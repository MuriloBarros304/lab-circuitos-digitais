// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/16/2024 17:06:11"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    circuito
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module circuito_vlg_sample_tst(
	clock,
	mem_enable,
	rom_enable,
	rw_enable,
	sampler_tx
);
input  clock;
input  mem_enable;
input  rom_enable;
input  rw_enable;
output sampler_tx;

reg sample;
time current_time;
always @(clock or mem_enable or rom_enable or rw_enable)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module circuito_vlg_check_tst (
	add_ram,
	add_rom,
	ram_data_output,
	rom_data_output,
	sampler_rx
);
input [3:0] add_ram;
input [3:0] add_rom;
input [7:0] ram_data_output;
input [7:0] rom_data_output;
input sampler_rx;

reg [3:0] add_ram_expected;
reg [3:0] add_rom_expected;
reg [7:0] ram_data_output_expected;
reg [7:0] rom_data_output_expected;

reg [3:0] add_ram_prev;
reg [3:0] add_rom_prev;
reg [7:0] ram_data_output_prev;
reg [7:0] rom_data_output_prev;

reg [3:0] add_ram_expected_prev;
reg [3:0] add_rom_expected_prev;
reg [7:0] ram_data_output_expected_prev;
reg [7:0] rom_data_output_expected_prev;

reg [3:0] last_add_ram_exp;
reg [3:0] last_add_rom_exp;
reg [7:0] last_ram_data_output_exp;
reg [7:0] last_rom_data_output_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	add_ram_prev = add_ram;
	add_rom_prev = add_rom;
	ram_data_output_prev = ram_data_output;
	rom_data_output_prev = rom_data_output;
end

// update expected /o prevs

always @(trigger)
begin
	add_ram_expected_prev = add_ram_expected;
	add_rom_expected_prev = add_rom_expected;
	ram_data_output_expected_prev = ram_data_output_expected;
	rom_data_output_expected_prev = rom_data_output_expected;
end


// expected rom_data_output[ 7 ]
initial
begin
	rom_data_output_expected[7] = 1'bX;
end 
// expected rom_data_output[ 6 ]
initial
begin
	rom_data_output_expected[6] = 1'bX;
end 
// expected rom_data_output[ 5 ]
initial
begin
	rom_data_output_expected[5] = 1'bX;
end 
// expected rom_data_output[ 4 ]
initial
begin
	rom_data_output_expected[4] = 1'bX;
end 
// expected rom_data_output[ 3 ]
initial
begin
	rom_data_output_expected[3] = 1'bX;
end 
// expected rom_data_output[ 2 ]
initial
begin
	rom_data_output_expected[2] = 1'bX;
end 
// expected rom_data_output[ 1 ]
initial
begin
	rom_data_output_expected[1] = 1'bX;
end 
// expected rom_data_output[ 0 ]
initial
begin
	rom_data_output_expected[0] = 1'bX;
end 
// expected add_rom[ 3 ]
initial
begin
	add_rom_expected[3] = 1'bX;
end 
// expected add_rom[ 2 ]
initial
begin
	add_rom_expected[2] = 1'bX;
end 
// expected add_rom[ 1 ]
initial
begin
	add_rom_expected[1] = 1'bX;
end 
// expected add_rom[ 0 ]
initial
begin
	add_rom_expected[0] = 1'bX;
end 
// expected add_ram[ 3 ]
initial
begin
	add_ram_expected[3] = 1'bX;
end 
// expected add_ram[ 2 ]
initial
begin
	add_ram_expected[2] = 1'bX;
end 
// expected add_ram[ 1 ]
initial
begin
	add_ram_expected[1] = 1'bX;
end 
// expected add_ram[ 0 ]
initial
begin
	add_ram_expected[0] = 1'bX;
end 
// expected ram_data_output[ 7 ]
initial
begin
	ram_data_output_expected[7] = 1'bX;
end 
// expected ram_data_output[ 6 ]
initial
begin
	ram_data_output_expected[6] = 1'bX;
end 
// expected ram_data_output[ 5 ]
initial
begin
	ram_data_output_expected[5] = 1'bX;
end 
// expected ram_data_output[ 4 ]
initial
begin
	ram_data_output_expected[4] = 1'bX;
end 
// expected ram_data_output[ 3 ]
initial
begin
	ram_data_output_expected[3] = 1'bX;
end 
// expected ram_data_output[ 2 ]
initial
begin
	ram_data_output_expected[2] = 1'bX;
end 
// expected ram_data_output[ 1 ]
initial
begin
	ram_data_output_expected[1] = 1'bX;
end 
// expected ram_data_output[ 0 ]
initial
begin
	ram_data_output_expected[0] = 1'bX;
end 
// generate trigger
always @(add_ram_expected or add_ram or add_rom_expected or add_rom or ram_data_output_expected or ram_data_output or rom_data_output_expected or rom_data_output)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected add_ram = %b | expected add_rom = %b | expected ram_data_output = %b | expected rom_data_output = %b | ",add_ram_expected_prev,add_rom_expected_prev,ram_data_output_expected_prev,rom_data_output_expected_prev);
	$display("| real add_ram = %b | real add_rom = %b | real ram_data_output = %b | real rom_data_output = %b | ",add_ram_prev,add_rom_prev,ram_data_output_prev,rom_data_output_prev);
`endif
	if (
		( add_ram_expected_prev[0] !== 1'bx ) && ( add_ram_prev[0] !== add_ram_expected_prev[0] )
		&& ((add_ram_expected_prev[0] !== last_add_ram_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port add_ram[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", add_ram_expected_prev);
		$display ("     Real value = %b", add_ram_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_add_ram_exp[0] = add_ram_expected_prev[0];
	end
	if (
		( add_ram_expected_prev[1] !== 1'bx ) && ( add_ram_prev[1] !== add_ram_expected_prev[1] )
		&& ((add_ram_expected_prev[1] !== last_add_ram_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port add_ram[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", add_ram_expected_prev);
		$display ("     Real value = %b", add_ram_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_add_ram_exp[1] = add_ram_expected_prev[1];
	end
	if (
		( add_ram_expected_prev[2] !== 1'bx ) && ( add_ram_prev[2] !== add_ram_expected_prev[2] )
		&& ((add_ram_expected_prev[2] !== last_add_ram_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port add_ram[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", add_ram_expected_prev);
		$display ("     Real value = %b", add_ram_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_add_ram_exp[2] = add_ram_expected_prev[2];
	end
	if (
		( add_ram_expected_prev[3] !== 1'bx ) && ( add_ram_prev[3] !== add_ram_expected_prev[3] )
		&& ((add_ram_expected_prev[3] !== last_add_ram_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port add_ram[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", add_ram_expected_prev);
		$display ("     Real value = %b", add_ram_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_add_ram_exp[3] = add_ram_expected_prev[3];
	end
	if (
		( add_rom_expected_prev[0] !== 1'bx ) && ( add_rom_prev[0] !== add_rom_expected_prev[0] )
		&& ((add_rom_expected_prev[0] !== last_add_rom_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port add_rom[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", add_rom_expected_prev);
		$display ("     Real value = %b", add_rom_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_add_rom_exp[0] = add_rom_expected_prev[0];
	end
	if (
		( add_rom_expected_prev[1] !== 1'bx ) && ( add_rom_prev[1] !== add_rom_expected_prev[1] )
		&& ((add_rom_expected_prev[1] !== last_add_rom_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port add_rom[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", add_rom_expected_prev);
		$display ("     Real value = %b", add_rom_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_add_rom_exp[1] = add_rom_expected_prev[1];
	end
	if (
		( add_rom_expected_prev[2] !== 1'bx ) && ( add_rom_prev[2] !== add_rom_expected_prev[2] )
		&& ((add_rom_expected_prev[2] !== last_add_rom_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port add_rom[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", add_rom_expected_prev);
		$display ("     Real value = %b", add_rom_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_add_rom_exp[2] = add_rom_expected_prev[2];
	end
	if (
		( add_rom_expected_prev[3] !== 1'bx ) && ( add_rom_prev[3] !== add_rom_expected_prev[3] )
		&& ((add_rom_expected_prev[3] !== last_add_rom_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port add_rom[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", add_rom_expected_prev);
		$display ("     Real value = %b", add_rom_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_add_rom_exp[3] = add_rom_expected_prev[3];
	end
	if (
		( ram_data_output_expected_prev[0] !== 1'bx ) && ( ram_data_output_prev[0] !== ram_data_output_expected_prev[0] )
		&& ((ram_data_output_expected_prev[0] !== last_ram_data_output_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ram_data_output[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ram_data_output_expected_prev);
		$display ("     Real value = %b", ram_data_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ram_data_output_exp[0] = ram_data_output_expected_prev[0];
	end
	if (
		( ram_data_output_expected_prev[1] !== 1'bx ) && ( ram_data_output_prev[1] !== ram_data_output_expected_prev[1] )
		&& ((ram_data_output_expected_prev[1] !== last_ram_data_output_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ram_data_output[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ram_data_output_expected_prev);
		$display ("     Real value = %b", ram_data_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ram_data_output_exp[1] = ram_data_output_expected_prev[1];
	end
	if (
		( ram_data_output_expected_prev[2] !== 1'bx ) && ( ram_data_output_prev[2] !== ram_data_output_expected_prev[2] )
		&& ((ram_data_output_expected_prev[2] !== last_ram_data_output_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ram_data_output[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ram_data_output_expected_prev);
		$display ("     Real value = %b", ram_data_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ram_data_output_exp[2] = ram_data_output_expected_prev[2];
	end
	if (
		( ram_data_output_expected_prev[3] !== 1'bx ) && ( ram_data_output_prev[3] !== ram_data_output_expected_prev[3] )
		&& ((ram_data_output_expected_prev[3] !== last_ram_data_output_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ram_data_output[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ram_data_output_expected_prev);
		$display ("     Real value = %b", ram_data_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ram_data_output_exp[3] = ram_data_output_expected_prev[3];
	end
	if (
		( ram_data_output_expected_prev[4] !== 1'bx ) && ( ram_data_output_prev[4] !== ram_data_output_expected_prev[4] )
		&& ((ram_data_output_expected_prev[4] !== last_ram_data_output_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ram_data_output[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ram_data_output_expected_prev);
		$display ("     Real value = %b", ram_data_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ram_data_output_exp[4] = ram_data_output_expected_prev[4];
	end
	if (
		( ram_data_output_expected_prev[5] !== 1'bx ) && ( ram_data_output_prev[5] !== ram_data_output_expected_prev[5] )
		&& ((ram_data_output_expected_prev[5] !== last_ram_data_output_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ram_data_output[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ram_data_output_expected_prev);
		$display ("     Real value = %b", ram_data_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ram_data_output_exp[5] = ram_data_output_expected_prev[5];
	end
	if (
		( ram_data_output_expected_prev[6] !== 1'bx ) && ( ram_data_output_prev[6] !== ram_data_output_expected_prev[6] )
		&& ((ram_data_output_expected_prev[6] !== last_ram_data_output_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ram_data_output[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ram_data_output_expected_prev);
		$display ("     Real value = %b", ram_data_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ram_data_output_exp[6] = ram_data_output_expected_prev[6];
	end
	if (
		( ram_data_output_expected_prev[7] !== 1'bx ) && ( ram_data_output_prev[7] !== ram_data_output_expected_prev[7] )
		&& ((ram_data_output_expected_prev[7] !== last_ram_data_output_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ram_data_output[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ram_data_output_expected_prev);
		$display ("     Real value = %b", ram_data_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ram_data_output_exp[7] = ram_data_output_expected_prev[7];
	end
	if (
		( rom_data_output_expected_prev[0] !== 1'bx ) && ( rom_data_output_prev[0] !== rom_data_output_expected_prev[0] )
		&& ((rom_data_output_expected_prev[0] !== last_rom_data_output_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rom_data_output[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rom_data_output_expected_prev);
		$display ("     Real value = %b", rom_data_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rom_data_output_exp[0] = rom_data_output_expected_prev[0];
	end
	if (
		( rom_data_output_expected_prev[1] !== 1'bx ) && ( rom_data_output_prev[1] !== rom_data_output_expected_prev[1] )
		&& ((rom_data_output_expected_prev[1] !== last_rom_data_output_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rom_data_output[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rom_data_output_expected_prev);
		$display ("     Real value = %b", rom_data_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rom_data_output_exp[1] = rom_data_output_expected_prev[1];
	end
	if (
		( rom_data_output_expected_prev[2] !== 1'bx ) && ( rom_data_output_prev[2] !== rom_data_output_expected_prev[2] )
		&& ((rom_data_output_expected_prev[2] !== last_rom_data_output_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rom_data_output[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rom_data_output_expected_prev);
		$display ("     Real value = %b", rom_data_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rom_data_output_exp[2] = rom_data_output_expected_prev[2];
	end
	if (
		( rom_data_output_expected_prev[3] !== 1'bx ) && ( rom_data_output_prev[3] !== rom_data_output_expected_prev[3] )
		&& ((rom_data_output_expected_prev[3] !== last_rom_data_output_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rom_data_output[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rom_data_output_expected_prev);
		$display ("     Real value = %b", rom_data_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rom_data_output_exp[3] = rom_data_output_expected_prev[3];
	end
	if (
		( rom_data_output_expected_prev[4] !== 1'bx ) && ( rom_data_output_prev[4] !== rom_data_output_expected_prev[4] )
		&& ((rom_data_output_expected_prev[4] !== last_rom_data_output_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rom_data_output[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rom_data_output_expected_prev);
		$display ("     Real value = %b", rom_data_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rom_data_output_exp[4] = rom_data_output_expected_prev[4];
	end
	if (
		( rom_data_output_expected_prev[5] !== 1'bx ) && ( rom_data_output_prev[5] !== rom_data_output_expected_prev[5] )
		&& ((rom_data_output_expected_prev[5] !== last_rom_data_output_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rom_data_output[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rom_data_output_expected_prev);
		$display ("     Real value = %b", rom_data_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rom_data_output_exp[5] = rom_data_output_expected_prev[5];
	end
	if (
		( rom_data_output_expected_prev[6] !== 1'bx ) && ( rom_data_output_prev[6] !== rom_data_output_expected_prev[6] )
		&& ((rom_data_output_expected_prev[6] !== last_rom_data_output_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rom_data_output[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rom_data_output_expected_prev);
		$display ("     Real value = %b", rom_data_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rom_data_output_exp[6] = rom_data_output_expected_prev[6];
	end
	if (
		( rom_data_output_expected_prev[7] !== 1'bx ) && ( rom_data_output_prev[7] !== rom_data_output_expected_prev[7] )
		&& ((rom_data_output_expected_prev[7] !== last_rom_data_output_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rom_data_output[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rom_data_output_expected_prev);
		$display ("     Real value = %b", rom_data_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rom_data_output_exp[7] = rom_data_output_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module circuito_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg mem_enable;
reg rom_enable;
reg rw_enable;
// wires                                               
wire [3:0] add_ram;
wire [3:0] add_rom;
wire [7:0] ram_data_output;
wire [7:0] rom_data_output;

wire sampler;                             

// assign statements (if any)                          
circuito i1 (
// port map - connection between master ports and signals/registers   
	.add_ram(add_ram),
	.add_rom(add_rom),
	.clock(clock),
	.mem_enable(mem_enable),
	.ram_data_output(ram_data_output),
	.rom_data_output(rom_data_output),
	.rom_enable(rom_enable),
	.rw_enable(rw_enable)
);

// clock
always
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	#10000;
end 

// mem_enable
initial
begin
	mem_enable = 1'b1;
end 

// rom_enable
initial
begin
	rom_enable = 1'b1;
end 

// rw_enable
always
begin
	rw_enable = 1'b0;
	rw_enable = #5000 1'b1;
	#5000;
end 

circuito_vlg_sample_tst tb_sample (
	.clock(clock),
	.mem_enable(mem_enable),
	.rom_enable(rom_enable),
	.rw_enable(rw_enable),
	.sampler_tx(sampler)
);

circuito_vlg_check_tst tb_out(
	.add_ram(add_ram),
	.add_rom(add_rom),
	.ram_data_output(ram_data_output),
	.rom_data_output(rom_data_output),
	.sampler_rx(sampler)
);
endmodule

