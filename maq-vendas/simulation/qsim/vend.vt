// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/28/2024 13:38:05"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    vend
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module vend_vlg_sample_tst(
	a,
	c,
	clock,
	conf,
	s,
	sel,
	sampler_tx
);
input [3:0] a;
input  c;
input  clock;
input  conf;
input [3:0] s;
input [2:0] sel;
output sampler_tx;

reg sample;
time current_time;
always @(a or c or clock or conf or s or sel)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module vend_vlg_check_tst (
	disp_moeda,
	sel_out,
	w,
	sampler_rx
);
input  disp_moeda;
input [2:0] sel_out;
input  w;
input sampler_rx;

reg  disp_moeda_expected;
reg [2:0] sel_out_expected;
reg  w_expected;

reg  disp_moeda_prev;
reg [2:0] sel_out_prev;
reg  w_prev;

reg  disp_moeda_expected_prev;
reg [2:0] sel_out_expected_prev;
reg  w_expected_prev;

reg  last_disp_moeda_exp;
reg [2:0] last_sel_out_exp;
reg  last_w_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	disp_moeda_prev = disp_moeda;
	sel_out_prev = sel_out;
	w_prev = w;
end

// update expected /o prevs

always @(trigger)
begin
	disp_moeda_expected_prev = disp_moeda_expected;
	sel_out_expected_prev = sel_out_expected;
	w_expected_prev = w_expected;
end



// expected disp_moeda
initial
begin
	disp_moeda_expected = 1'bX;
end 
// expected sel_out[ 2 ]
initial
begin
	sel_out_expected[2] = 1'bX;
end 
// expected sel_out[ 1 ]
initial
begin
	sel_out_expected[1] = 1'bX;
end 
// expected sel_out[ 0 ]
initial
begin
	sel_out_expected[0] = 1'bX;
end 

// expected w
initial
begin
	w_expected = 1'bX;
end 
// generate trigger
always @(disp_moeda_expected or disp_moeda or sel_out_expected or sel_out or w_expected or w)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected disp_moeda = %b | expected sel_out = %b | expected w = %b | ",disp_moeda_expected_prev,sel_out_expected_prev,w_expected_prev);
	$display("| real disp_moeda = %b | real sel_out = %b | real w = %b | ",disp_moeda_prev,sel_out_prev,w_prev);
`endif
	if (
		( disp_moeda_expected_prev !== 1'bx ) && ( disp_moeda_prev !== disp_moeda_expected_prev )
		&& ((disp_moeda_expected_prev !== last_disp_moeda_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port disp_moeda :: @time = %t",  $realtime);
		$display ("     Expected value = %b", disp_moeda_expected_prev);
		$display ("     Real value = %b", disp_moeda_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_disp_moeda_exp = disp_moeda_expected_prev;
	end
	if (
		( sel_out_expected_prev[0] !== 1'bx ) && ( sel_out_prev[0] !== sel_out_expected_prev[0] )
		&& ((sel_out_expected_prev[0] !== last_sel_out_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sel_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sel_out_expected_prev);
		$display ("     Real value = %b", sel_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sel_out_exp[0] = sel_out_expected_prev[0];
	end
	if (
		( sel_out_expected_prev[1] !== 1'bx ) && ( sel_out_prev[1] !== sel_out_expected_prev[1] )
		&& ((sel_out_expected_prev[1] !== last_sel_out_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sel_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sel_out_expected_prev);
		$display ("     Real value = %b", sel_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sel_out_exp[1] = sel_out_expected_prev[1];
	end
	if (
		( sel_out_expected_prev[2] !== 1'bx ) && ( sel_out_prev[2] !== sel_out_expected_prev[2] )
		&& ((sel_out_expected_prev[2] !== last_sel_out_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sel_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sel_out_expected_prev);
		$display ("     Real value = %b", sel_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sel_out_exp[2] = sel_out_expected_prev[2];
	end
	if (
		( w_expected_prev !== 1'bx ) && ( w_prev !== w_expected_prev )
		&& ((w_expected_prev !== last_w_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w_expected_prev);
		$display ("     Real value = %b", w_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_w_exp = w_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module vend_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] a;
reg c;
reg clock;
reg conf;
reg [3:0] s;
reg [2:0] sel;
// wires                                               
wire disp_moeda;
wire [2:0] sel_out;
wire w;

wire sampler;                             

// assign statements (if any)                          
vend i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.c(c),
	.clock(clock),
	.conf(conf),
	.disp_moeda(disp_moeda),
	.s(s),
	.sel(sel),
	.sel_out(sel_out),
	.w(w)
);
// a[ 3 ]
initial
begin
	a[3] = 1'b0;
end 
// a[ 2 ]
initial
begin
	a[2] = 1'b0;
end 
// a[ 1 ]
initial
begin
	a[1] = 1'b0;
end 
// a[ 0 ]
initial
begin
	a[0] = 1'b0;
	a[0] = #30000 1'b1;
	a[0] = #240000 1'b0;
end 

// c
initial
begin
	c = 1'b0;
	c = #30000 1'b1;
	c = #240000 1'b0;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #5000 1'b1;
	#5000;
end 

// conf
initial
begin
	conf = 1'b0;
	conf = #70000 1'b1;
	conf = #200000 1'b0;
end 
// s[ 3 ]
initial
begin
	s[3] = 1'b0;
end 
// s[ 2 ]
initial
begin
	s[2] = 1'b1;
end 
// s[ 1 ]
initial
begin
	s[1] = 1'b1;
end 
// s[ 0 ]
initial
begin
	s[0] = 1'b1;
end 
// sel[ 2 ]
initial
begin
	sel[2] = 1'b0;
	sel[2] = #130000 1'b1;
	sel[2] = #30000 1'b0;
	sel[2] = #30000 1'b1;
	sel[2] = #80000 1'b0;
end 
// sel[ 1 ]
initial
begin
	sel[1] = 1'b0;
	sel[1] = #130000 1'b1;
	sel[1] = #150000 1'b0;
end 
// sel[ 0 ]
initial
begin
	sel[0] = 1'b1;
end 

vend_vlg_sample_tst tb_sample (
	.a(a),
	.c(c),
	.clock(clock),
	.conf(conf),
	.s(s),
	.sel(sel),
	.sampler_tx(sampler)
);

vend_vlg_check_tst tb_out(
	.disp_moeda(disp_moeda),
	.sel_out(sel_out),
	.w(w),
	.sampler_rx(sampler)
);
endmodule

